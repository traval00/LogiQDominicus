import React, { useEffect, useMemo, useState } from "react";

/**
 * LogiqSignals – Crypto & Options UI (single-file React)
 * ------------------------------------------------------------------
 * Drop this file into your React project and render <App />.
 * It reads public JSON feeds generated by your engine:
 *   - /signals.json (intraday, includes options_suggestion for equities)
 *   - /signals_swing.json (daily swing)
 *   - /crypto_movers.json (weekly movers)
 *
 * Styling: TailwindCSS (clean, dark UI). No external UI libs required.
 * ------------------------------------------------------------------
 */

// -------------------- Types --------------------
export type OptionSuggestion = {
  expiration?: string;
  strike?: number;
  symbol?: string;
  last?: number;
  bid?: number;
  ask?: number;
} | null;

export type SignalRow = {
  ticker: string;
  timeframe: string; // "15m-intraday" | "1d-swing"
  strategy: string;
  prob: number;
  news_sent?: number;
  entry: number;
  stop: number;
  targets: number[];
  trail?: { method?: string; atr_mult?: number } | null;
  options_suggestion?: OptionSuggestion;
  asof: string; // ISO string or date
  used_model?: boolean;
};

export type MoverRow = {
  ticker: string;
  weekly_change: number; // decimal (0.12 = +12%)
};

// -------------------- Helpers --------------------
const currency = (n: number) =>
  (n ?? 0).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 4 });

const pct = (x: number, sign = true) =>
  `${sign && x > 0 ? "+" : ""}${(x * 100).toFixed(2)}%`;

const classNames = (...cx: (string | false | undefined)[]) => cx.filter(Boolean).join(" ");

async function fetchJSON<T = any>(url: string): Promise<T | null> {
  try {
    const r = await fetch(url, { cache: "no-cache" });
    if (!r.ok) throw new Error(`${r.status} ${r.statusText}`);
    const text = await r.text();
    if (!text) return null;
    // Our engine writes JSON via pd.Series(list).to_json(..., orient='values') – that's an array.
    const data = JSON.parse(text);
    // Ensure array
    if (Array.isArray(data)) return data as T;
    // Some older builds may have object with records
    if (data && Array.isArray((data as any).records)) return (data as any).records as T;
    return data as T;
  } catch (e) {
    console.error("fetchJSON", url, e);
    return null;
  }
}

// Sort helpers
function sortSignals(a: SignalRow, b: SignalRow) {
  // Higher prob first, then by recent time
  if ((b.prob ?? 0) !== (a.prob ?? 0)) return (b.prob ?? 0) - (a.prob ?? 0);
  return new Date(b.asof).getTime() - new Date(a.asof).getTime();
}

// Gradient badge
const Badge: React.FC<{ label: string; tone?: "gold" | "blue" | "purple" }>
  = ({ label, tone = "blue" }) => (
    <span
      className={classNames(
        "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium",
        tone === "gold" && "bg-gradient-to-r from-amber-400 to-yellow-500 text-black",
        tone === "blue" && "bg-gradient-to-r from-blue-500 to-cyan-400 text-black",
        tone === "purple" && "bg-gradient-to-r from-fuchsia-500 to-violet-500 text-white"
      )}
    >{label}</span>
  );

// Card shell
const Card: React.FC<{ children: React.ReactNode; className?: string }>
  = ({ children, className }) => (
    <div className={classNames(
      "rounded-2xl bg-zinc-900/70 border border-zinc-800 shadow-lg p-4",
      className || ""
    )}>{children}</div>
  );

// Signal card
const SignalCard: React.FC<{ s: SignalRow; showOptions?: boolean }>
  = ({ s, showOptions }) => {
    const rr = s.targets?.length ? (s.targets[0] - s.entry) / Math.max(1e-9, (s.entry - s.stop)) : null;
    const isCrypto = s.ticker.includes("-USD");
    return (
      <Card>
        <div className="flex items-start justify-between gap-3">
          <div>
            <div className="flex items-center gap-2">
              <h3 className="text-lg font-semibold text-zinc-100 tracking-tight">{s.ticker}</h3>
              <Badge label={s.timeframe.includes("15m") ? "Intraday" : "Swing"} tone={s.timeframe.includes("15m") ? "purple" : "gold"} />
              {isCrypto ? <Badge label="Crypto" tone="blue"/> : <Badge label="Equity" tone="gold"/>}
            </div>
            <p className="text-sm text-zinc-400 mt-1">{s.strategy}</p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-zinc-100">{(s.prob * 100).toFixed(1)}%</div>
            <div className="text-xs text-zinc-400">AI Confidence</div>
          </div>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4 text-sm">
          <div>
            <div className="text-zinc-400">Entry</div>
            <div className="font-semibold text-zinc-100">{currency(s.entry)}</div>
          </div>
          <div>
            <div className="text-zinc-400">Stop</div>
            <div className="font-semibold text-zinc-100">{currency(s.stop)}</div>
          </div>
          <div>
            <div className="text-zinc-400">Targets</div>
            <div className="font-semibold text-zinc-100">{s.targets?.map(t => currency(t)).join(" · ")}</div>
          </div>
          <div>
            <div className="text-zinc-400">R:R (T1)</div>
            <div className="font-semibold text-zinc-100">{rr ? rr.toFixed(2) : "-"}</div>
          </div>
        </div>

        <div className="mt-3 flex flex-wrap items-center gap-2 text-xs text-zinc-400">
          {typeof s.news_sent === "number" && (
            <span>News Sentiment: <span className={s.news_sent > 0 ? "text-emerald-400" : s.news_sent < 0 ? "text-red-400" : "text-zinc-300"}>{pct(s.news_sent)}</span></span>
          )}
          {s.trail?.method && <span>· Trail: {s.trail.method} × {s.trail.atr_mult ?? 1}</span>}
          <span>· As of {new Date(s.asof).toLocaleString()}</span>
        </div>

        {showOptions && s.options_suggestion && !isCrypto && (
          <div className="mt-4 border-t border-zinc-800 pt-3">
            <div className="text-sm font-semibold text-zinc-200 mb-1">Option Suggestion</div>
            <div className="text-sm text-zinc-300 flex flex-wrap gap-4">
              {s.options_suggestion.symbol && <span>Symbol: <b className="text-zinc-100">{s.options_suggestion.symbol}</b></span>}
              {s.options_suggestion.expiration && <span>Expiry: <b className="text-zinc-100">{s.options_suggestion.expiration}</b></span>}
              {typeof s.options_suggestion.strike === "number" && <span>Strike: <b className="text-zinc-100">{s.options_suggestion.strike}</b></span>}
              {(typeof s.options_suggestion.bid === "number" || typeof s.options_suggestion.ask === "number") && (
                <span>Bid/Ask: <b className="text-zinc-100">{s.options_suggestion.bid ?? "-"}</b> / <b className="text-zinc-100">{s.options_suggestion.ask ?? "-"}</b></span>
              )}
            </div>
          </div>
        )}
      </Card>
    );
  };

// Movers card
const MoverCard: React.FC<{ m: MoverRow }>
  = ({ m }) => (
    <Card>
      <div className="flex items-center justify-between">
        <div className="text-zinc-100 font-semibold">{m.ticker}</div>
        <div className={classNames(
          "text-sm font-bold",
          m.weekly_change >= 0 ? "text-emerald-400" : "text-red-400"
        )}>{pct(m.weekly_change)}</div>
      </div>
    </Card>
  );

// Simple Tabs component
const Tabs: React.FC<{ tabs: { id: string; label: string }[]; current: string; onChange: (id: string) => void }>
  = ({ tabs, current, onChange }) => (
    <div className="flex gap-2 rounded-xl bg-zinc-900/60 p-1 border border-zinc-800 w-full md:w-auto">
      {tabs.map(t => (
        <button
          key={t.id}
          onClick={() => onChange(t.id)}
          className={classNames(
            "px-3 py-1.5 text-sm rounded-lg",
            current === t.id
              ? "bg-gradient-to-r from-amber-400 to-yellow-500 text-black font-semibold"
              : "text-zinc-300 hover:text-zinc-100 hover:bg-zinc-800"
          )}
        >{t.label}</button>
      ))}
    </div>
  );

// -------------------- Main App --------------------
export default function App() {
  const [intraday, setIntraday] = useState<SignalRow[] | null>(null);
  const [swing, setSwing] = useState<SignalRow[] | null>(null);
  const [movers, setMovers] = useState<MoverRow[] | null>(null);
  const [tab, setTab] = useState<"crypto" | "options" | "pricing">("crypto");

  useEffect(() => {
    fetchJSON<SignalRow[]>("/signals.json").then(setIntraday);
    fetchJSON<SignalRow[]>("/signals_swing.json").then(setSwing);
    fetchJSON<MoverRow[]>("/crypto_movers.json").then(setMovers);
  }, []);

  const intradaySorted = useMemo(() => (intraday ? [...intraday].sort(sortSignals) : null), [intraday]);
  const swingSorted = useMemo(() => (swing ? [...swing].sort(sortSignals) : null), [swing]);

  return (
    <div className="min-h-screen bg-black text-zinc-200">
      {/* Hero */}
      <header className="mx-auto max-w-7xl px-4 pt-10 pb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-6">
          <div className="flex items-center gap-4">
            <img src="/logo.png" alt="Logiq Signals" className="h-14 w-14 rounded-xl shadow-lg" />
            <div>
              <h1 className="text-2xl md:text-3xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-amber-300 via-orange-400 to-fuchsia-500">
                Logiq Signals
              </h1>
              <p className="text-sm text-zinc-400">AI‑Powered Signals for Crypto & Options</p>
            </div>
          </div>

          <Tabs
            tabs={[
              { id: "crypto", label: "Crypto" },
              { id: "options", label: "Options" },
              { id: "pricing", label: "Pricing" },
            ]}
            current={tab}
            onChange={(id) => setTab(id as any)}
          />
        </div>
      </header>

      {/* Content */}
      <main className="mx-auto max-w-7xl px-4 pb-16">
        {tab === "crypto" && (
          <section className="space-y-10">
            {/* Movers */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-xl font-bold">Top Crypto Movers (7D)</h2>
                <a href="/crypto_movers.json" className="text-xs text-zinc-400 hover:text-zinc-100">View JSON</a>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {(movers ?? []).slice(0, 12).map((m, i) => (
                  <MoverCard key={`${m.ticker}-${i}`} m={m} />
                ))}
                {(!movers || movers.length === 0) && (
                  <Card><div className="text-sm text-zinc-400">No movers yet. Run <code>crypto_movers.py</code>.</div></Card>
                )}
              </div>
            </div>

            {/* Intraday */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-xl font-bold">Intraday Signals</h2>
                <a href="/signals.json" className="text-xs text-zinc-400 hover:text-zinc-100">View JSON</a>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {(intradaySorted ?? []).map((s, i) => (
                  <SignalCard key={`${s.ticker}-${s.asof}-${i}`} s={s} showOptions={false} />
                ))}
                {(!intradaySorted || intradaySorted.length === 0) && (
                  <Card><div className="text-sm text-zinc-400">No intraday signals yet.</div></Card>
                )}
              </div>
            </div>

            {/* Swing */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-xl font-bold">Swing Signals</h2>
                <a href="/signals_swing.json" className="text-xs text-zinc-400 hover:text-zinc-100">View JSON</a>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {(swingSorted ?? []).map((s, i) => (
                  <SignalCard key={`${s.ticker}-${s.asof}-${i}`} s={s} showOptions={false} />
                ))}
                {(!swingSorted || swingSorted.length === 0) && (
                  <Card><div className="text-sm text-zinc-400">No swing signals yet.</div></Card>
                )}
              </div>
            </div>
          </section>
        )}

        {tab === "options" && (
          <section className="space-y-8">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-bold">Options Signals (from Intraday & Swing)</h2>
              <a href="/signals.json" className="text-xs text-zinc-400 hover:text-zinc-100">View JSON</a>
            </div>
            <p className="text-sm text-zinc-400">We surface option contracts when available (equities only). Crypto tickers ("-USD") won’t show options.</p>

            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {(
                [...(intradaySorted ?? []), ...(swingSorted ?? [])]
                  .filter(s => !s.ticker.includes("-USD") && s.options_suggestion)
                  .sort(sortSignals)
              ).map((s, i) => (
                <SignalCard key={`opt-${s.ticker}-${s.asof}-${i}`} s={s} showOptions />
              ))}
            </div>

            {(
              [...(intradaySorted ?? []), ...(swingSorted ?? [])]
                .filter(s => !s.ticker.includes("-USD") && s.options_suggestion)
            ).length === 0 && (
              <Card>
                <div className="text-sm text-zinc-400">No options suggestions in the current feeds. Re-run your engine or check back during market hours.</div>
              </Card>
            )}
          </section>
        )}

        {tab === "pricing" && (
          <section>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <h3 className="text-lg font-bold">Free</h3>
                <p className="text-sm text-zinc-400 mt-1">Weekly Movers Report + 1 delayed signal/week</p>
                <div className="mt-4 text-3xl font-extrabold">$0</div>
                <a
                  href="#"
                  className="mt-4 inline-flex items-center justify-center rounded-xl px-4 py-2 bg-zinc-800 hover:bg-zinc-700 text-zinc-100"
                >Get the Free Report</a>
              </Card>

              <Card>
                <h3 className="text-lg font-bold">Pro (Crypto Swing)</h3>
                <p className="text-sm text-zinc-400 mt-1">Daily Swing Signals + Movers</p>
                <div className="mt-4 text-3xl font-extrabold">$29<span className="text-base font-semibold text-zinc-400">/mo</span></div>
                <a
                  href="#" // TODO: paste your Gumroad Pro URL
                  className="mt-4 inline-flex items-center justify-center rounded-xl px-4 py-2 bg-gradient-to-r from-blue-500 to-cyan-400 text-black font-semibold"
                >Start Pro</a>
              </Card>

              <Card>
                <h3 className="text-lg font-bold">Elite (Intraday + Options)</h3>
                <p className="text-sm text-zinc-400 mt-1">Live Intraday + Swing + Options contracts + Sentiment</p>
                <div className="mt-4 text-3xl font-extrabold">$79<span className="text-base font-semibold text-zinc-400">/mo</span></div>
                <a
                  href="#" // TODO: paste your Gumroad Elite URL
                  className="mt-4 inline-flex items-center justify-center rounded-xl px-4 py-2 bg-gradient-to-r from-amber-400 to-yellow-500 text-black font-semibold"
                >Start Elite</a>
              </Card>
            </div>
          </section>
        )}
      </main>

      {/* Footer */}
      <footer className="border-t border-zinc-900/70 py-10 mt-8">
        <div className="mx-auto max-w-7xl px-4 text-xs text-zinc-500 flex flex-col md:flex-row items-center justify-between gap-3">
          <div>© {new Date().getFullYear()} Logiq Signals. All rights reserved.</div>
          <div className="flex items-center gap-4">
            <a href="#" className="hover:text-zinc-300">Terms</a>
            <a href="#" className="hover:text-zinc-300">Privacy</a>
            <a href="mailto:support@logiqsignals.com" className="hover:text-zinc-300">Support</a>
          </div>
        </div>
      </footer>
    </div>
  );
}
